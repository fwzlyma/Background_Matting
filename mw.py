# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mw.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import time

import cv2
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPalette, QPixmap, QBrush
from PyQt5.QtWidgets import QMainWindow, QApplication


class Ui_MainWindow(object):
    def __init__(self, parent=None):
        self.timer_camera = QtCore.QTimer()  # 初始化定时器
        self.timer_camera2 = QtCore.QTimer()  # 初始化定时器
        self.cap = cv2.VideoCapture()  # 初始化摄像头
        self.CAM_NUM = 0
        self.__flag_work = 0
        self.x = 0
        self.count = 0
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1309, 731)
        MainWindow.setFixedSize(1309, 731)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("resources/images/win_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setMinimumSize(QtCore.QSize(0, 50))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("resources/images/camera.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon1)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 0, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setMinimumSize(QtCore.QSize(0, 50))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("resources/images/welcom.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon2)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 0, 1, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setMinimumSize(QtCore.QSize(0, 50))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("resources/images/paishe.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon3)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout.addWidget(self.pushButton_3, 0, 2, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setMinimumSize(QtCore.QSize(0, 50))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("resources/images/close.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_4.setIcon(icon4)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 0, 3, 1, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setMinimumSize(QtCore.QSize(640, 480))
        self.label.setMaximumSize(QtCore.QSize(640, 480))
        self.label.setText("")
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 1, 0, 1, 4)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setMinimumSize(QtCore.QSize(640, 480))
        self.label_2.setMaximumSize(QtCore.QSize(640, 480))
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 4, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1309, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton.clicked.connect(self.open_close_camera)
        self.pushButton_2.clicked.connect(self.img_process)
        self.pushButton_3.clicked.connect(self.paishe)
        self.timer_camera.timeout.connect(self.img_show)
        self.pushButton_4.clicked.connect(MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # 设置背景图片
        palette = QPalette()
        pix = QPixmap("resources/images/mwin.png")
        pix = pix.scaled(MainWindow.width(), MainWindow.height())
        palette.setBrush(QPalette.Background, QBrush(pix))
        MainWindow.setPalette(palette)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "BackgroundMatting Sys 1.0"))
        self.pushButton.setText(_translate("MainWindow", "打开相机"))
        self.pushButton_2.setText(_translate("MainWindow", "智能抠图"))
        self.pushButton_3.setText(_translate("MainWindow", "拍摄背景"))
        self.pushButton_4.setText(_translate("MainWindow", "退出系统"))

    def open_close_camera(self):
        if self.timer_camera.isActive() == False:
            flag = self.cap.open(self.CAM_NUM,cv2.CAP_DSHOW)
            if flag == False:
                msg = QtWidgets.QMessageBox.Warning(self, 'Warning', '请检测相机与电脑是否连接正确',
                                                    buttons=QtWidgets.QMessageBox.Ok,
                                                    defaultButton=QtWidgets.QMessageBox.Ok)
            else:
                self.timer_camera.start(30)
                self.pushButton.setText("关闭相机")
                icon = QtGui.QIcon()
                icon.addPixmap(QtGui.QPixmap("resources/images/close.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.pushButton.setIcon(icon)
                self.pushButton.setObjectName("pushButton")
        else:
            self.timer_camera.stop()
            self.statusbar.hide()
            self.cap.release()
            self.label.clear()
            self.pushButton.setText("打开相机")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("resources/images/camera.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.pushButton.setIcon(icon)
            self.pushButton.setObjectName("pushButton")

    def img_show(self):
        self.statusbar.showMessage(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
        flag, self.image = self.cap.read()
        show = cv2.resize(self.image, (640, 480))
        show = cv2.cvtColor(show, cv2.COLOR_BGR2RGB)
        showImage = QtGui.QImage(show.data, show.shape[1], show.shape[0], QtGui.QImage.Format_RGB888)
        self.label.setPixmap(QtGui.QPixmap.fromImage(showImage))

    def img_process(self):
        pass
    def paishe(self):
        if self.timer_camera.isActive() == False:
            print("错误！相机未打开！")
        else:
            # for t in range(3):
            #     print("拍摄，倒计时"+(3-t).__str__())
            #     self.timer_camera2.start(1000)
            #     if self.timer_camera2.timeout():
            #         continue
            ret,frame = self.cap.read()
            cv2.imwrite("temp/jack.png", frame)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
